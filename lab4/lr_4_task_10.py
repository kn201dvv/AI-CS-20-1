# -*- coding: utf-8 -*-
"""lr_4_task_10.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1viVLNxddwqevfok5YBQjwzRL4OQlKkCq
"""

import argparse
import json
import numpy as np

from scipy.stats import pearsonr

def pearson_score(user1_ratings, user2_ratings):
    # фільми, які оцінили обидва користувачі
    common_movies = [movie for movie in user1_ratings if movie in user2_ratings]

    if not common_movies:
        return 0  # Повертаємо 0, якщо немає спільних оцінок

    #  середні оцінки кожного користувача для спільних фільмів
    user1_mean = np.mean([user1_ratings[movie] for movie in common_movies])
    user2_mean = np.mean([user2_ratings[movie] for movie in common_movies])

    #  чисельник і знаменник для формули Пірсона
    numerator = sum((user1_ratings[movie] - user1_mean) * (user2_ratings[movie] - user2_mean) for movie in common_movies)
    denominator_user1 = np.sqrt(sum((user1_ratings[movie] - user1_mean)**2 for movie in common_movies))
    denominator_user2 = np.sqrt(sum((user2_ratings[movie] - user2_mean)**2 for movie in common_movies))

    if denominator_user1 == 0 or denominator_user2 == 0:
        return 0  # Повертаємо 0, якщо один з користувачів не має дисперсії

    #  коефіцієнт кореляції Пірсона
    pearson = numerator / (denominator_user1 * denominator_user2)

    return pearson

# Визначимо функцію для парсингу вхідних аргументів.
def build_arg_parser():
    parser = argparse.ArgumentParser(description="Find users who are similar to the input user")
    parser.add_argument('--user', dest='user', required=True, help='Input user')
    return parser

# Визначимо функцію, яка знаходитиме в наборі даних користувачів, аналогічних зазначеному.
def find_similar_users(dataset, input_user, num_users):
    if input_user not in dataset:
        raise TypeError('Cannot find ' + input_user + ' in the dataset')

    # Оцінюємо подібність користувача до інших користувачів та зберігаємо результати
    scores = np.array([[x, pearson_score(dataset[input_user], dataset[x])] for x in dataset if x != input_user])

    # Сортування оцінок за спаданням
    scores_sorted = scores[scores[:, 1].argsort()[::-1]]

   # Вилучення оцінок перших 'num_users' користувачів
    top_users = scores_sorted[:num_users]

    return top_users

# Визначимо основну функцію
if __name__ == '__main__':
    user = "Bill Duffy"
    ratings_file = 'ratings.json'

    with open(ratings_file, 'r') as f:
        data = json.loads(f.read())

    print('\nUsers similar to ' + user + ':\n')
    similar_users = find_similar_users(data, user, 3)
    print('User\t\t\tSimilarity score')
    print('-' * 41)
    for item in similar_users:
        print(item[0], '\t\t', round(float(item[1]), 2))