# -*- coding: utf-8 -*-
"""lr_4_task_9.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1uXrPK30gRq74mH1D1hvEenlcSjf2D2bu
"""

import argparse
import json
import numpy as np

#парсер для обробки вхідних аргументів
def build_arg_parser():
    parser = argparse.ArgumentParser(description='Compute similarity score')
    parser.add_argument('--user1', dest='user1', required=True, help='First user')
    parser.add_argument('--user2', dest='user2', required=True, help='Second user')
    parser.add_argument("--score-type", dest="score_type", required=True, choices=['Euclidean', 'Pearson'], help="Similarity metric to be used")
    return parser

def find_common_ratings(dataset, user1, user2):
    common_ratings = {}
    for item in dataset[user1]:
        if item in dataset[user2]:
            common_ratings[item] = 1
    return common_ratings

def euclidean_score(dataset, user1, user2):
    if user1 not in dataset:
        raise TypeError("Cannot find " + user1 + " in the dataset")
    if user2 not in dataset:
        raise TypeError("Cannot find " + user2 + " in the dataset")

    common_ratings = find_common_ratings(dataset, user1, user2)

    if len(common_ratings) == 0:
        return 0

    squared_diff = []
    for item in common_ratings:
        squared_diff.append(np.square(dataset[user1][item] - dataset[user2][item]))

    similarity_score = 1 / (1 + np.sqrt(np.sum(squared_diff)))
    return similarity_score

def pearson_score(dataset, user1, user2):
    if user1 not in dataset:
        raise TypeError('Cannot find ' + user1 + ' in the dataset')
    if user2 not in dataset:
        raise TypeError('Cannot find ' + user2 + ' in the dataset')

    common_ratings = find_common_ratings(dataset, user1, user2)

    if len(common_ratings) == 0:
        return 0

    sum1 = sum(dataset[user1][item] for item in common_ratings)
    sum2 = sum(dataset[user2][item] for item in common_ratings)

    sum1_squared = sum(pow(dataset[user1][item], 2) for item in common_ratings)
    sum2_squared = sum(pow(dataset[user2][item], 2) for item in common_ratings)

    product_sum = sum(dataset[user1][item] * dataset[user2][item] for item in common_ratings)
    num = product_sum - (sum1 * sum2 / len(common_ratings))
    den = np.sqrt((sum1_squared - pow(sum1, 2) / len(common_ratings)) * (sum2_squared - pow(sum2, 2) / len(common_ratings)))

    if den == 0:
        return 0

    similarity_score = num / den
    return similarity_score

if __name__ == '__main__':
    user1 = "David Smith"
    user2 = "Bill Duffy"
    score_type = "Euclidean"
    ratings_file = 'ratings.json'

    with open(ratings_file, 'r') as f:
        data = json.loads(f.read())

    if score_type == 'Euclidean':
        print("\nEuclidean score:")
        print(euclidean_score(data, user1, user2))
    else:
        print("\nPearson score:")
        print(pearson_score(data, user1, user2))