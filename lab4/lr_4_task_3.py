# -*- coding: utf-8 -*-
"""LR_4_task_3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1TtI5wAA-w9eciWpYA6-VQUwVxEO2i_Vt
"""

import numpy as np
import matplotlib.pyplot as plt

from sklearn import model_selection
from sklearn.ensemble import ExtraTreesClassifier
from sklearn.metrics import classification_report
from utilities import visualize_classifier

# Завантаження вхідних даних
input_file = 'data_random_forests.txt'
data = np.loadtxt(input_file, delimiter=',')
X, y = data[:, :-1], data[:, -1]

# Розбиття даних на три класи на підставі міток
class_0 = np.array(X[y == 0])
class_1 = np.array(X[y == 1])
class_2 = np.array(X[y == 2])

# Розбивка даних на навчальний та тестовий набори
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=5)

# Визначення сітки значень параметрів
parameter_grid = [
    {'n_estimators': [100], 'max_depth': [2, 4, 7, 12, 16]},
    {'max_depth': [4], 'n_estimators': [25, 50, 100, 250]}
]

# Метрики для вимірювання якості класифікації з урахуванням ваги класів
metrics = ['precision_weighted', 'recall_weighted']

# Створення окремих класифікаторів для precision і recall
precision_classifier = model_selection.GridSearchCV(
    ExtraTreesClassifier(random_state=0),
    parameter_grid, cv=5, scoring='precision_weighted')
recall_classifier = model_selection.GridSearchCV(
    ExtraTreesClassifier(random_state=0),
    parameter_grid, cv=5, scoring='recall_weighted')

for metric, classifier in [('precision_weighted', precision_classifier), ('recall_weighted', recall_classifier)]:
    print("\n##### Searching optimal parameters for", metric)
    classifier.fit(X_train, y_train)

    # Пошук оптимальних параметрів класифікатора для поточної метрики
    print("\nGrid scores for the parameter grid:")
    for params, avg_score, _ in zip(classifier.cv_results_['params'], classifier.cv_results_['mean_test_score'], classifier.cv_results_['std_test_score']):
        print(params, '-->', round(avg_score, 3))

    print("\nBest parameters for", metric, ":", classifier.best_params_)

# Звіт із результатами роботи класифікаторів та результати передбачень
precision_y_pred = precision_classifier.predict(X_test)
recall_y_pred = recall_classifier.predict(X_test)

print("\nPerformance report for precision:\n")
print(classification_report(y_test, precision_y_pred))

print("\nPerformance report for recall:\n")
print(classification_report(y_test, recall_y_pred))